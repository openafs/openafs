#!/bin/bash

# kmodtool - Helper script for building kernel module RPMs
# Copyright (c) 2003-2007 Ville Skytt√§ <ville.skytta@iki.fi>,
#                         Thorsten Leemhuis <fedora@leemhuis.info>
#
# Modified by Simon Wilkinson for OpenAFS

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

shopt -s extglob

myprog="kmodtool"
myver="0.10.13"
knownvariants=@(BOOT|PAE?(-debug)|@(big|huge)mem|debug|enterprise|kdump|?(large)smp?(-debug)|uml|xen?([0U])?(-PAE))
kmod_name=
kver=
verrel=
variant=

get_verrel ()
{
  verrel=${1:-$(uname -r)}
  verrel=${verrel%%$knownvariants}
  case "$verrel" in
    *.el[6-9].elrepo*)
                   verrel="`echo ${verrel} | sed -e 's/^\(.*.el[6-9].elrepo[^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
    *.el[1-9][0-9].elrepo*)
                   verrel="`echo ${verrel} | sed -e 's/^\(.*.el[1-9][0-9].elrepo[^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
    *.el[6-9]*)    verrel="`echo ${verrel} | sed -e 's/^\(.*.el[6-9][^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
    *.el[1-9][0-9]*)
                   verrel="`echo ${verrel} | sed -e 's/^\(.*.el[1-9][0-9][^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
    *.fc[1-9][0-9]*)
                   verrel="`echo ${verrel} | sed -e 's/^\(.*.fc[1-9][0-9][^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
    *.fc9*)        verrel="`echo ${verrel} | sed -e 's/^\(.*.fc9[^\.]*\)\.[^\.]\+.\?$/\1/'`" ;;
  esac
}

print_verrel ()
{
  get_verrel $@
  echo "${verrel}"
}

get_variant ()
{
  get_verrel $@
  variant=${1:-$(uname -r)}
  variant=${variant##$verrel}
  variant=${variant:-'""'}
}

print_variant ()
{
  get_variant $@
  echo "${variant}"
}


get_rpmtemplate ()
{
    local variant="${1}"
    local dashvariant="${variant:+-${variant}}"
    case "$verrel" in
        *.el[6-9]*)
	       kdep="kernel-%{_target_cpu} = ${verrel}${variant}"     ;;
        *.el[1-9][0-9]*)
	       kdep="kernel-%{_target_cpu} = ${verrel}${variant}"     ;;
        *.EL*) kdep="kernel${dashvariant}-%{_target_cpu} = ${verrel}" ;;
        *)     kdep="kernel-%{_target_cpu} = ${verrel}${variant}"     ;;
    esac
    case "$verrel" in
        *.el[6-9]*)
	          kname="${verrel}.%{_target_cpu}${variant:+.${variant}}" ;;
        *.el[1-9][0-9]*)
	          kname="${verrel}.%{_target_cpu}${variant:++${variant}}" ;;
        *.fc[2-9][0-9]*)
	          kname="${verrel}.%{_target_cpu}${variant:++${variant}}" ;;
        *.fc1[0-9]*)
	          kname="${verrel}.%{_target_cpu}${variant:+.${variant}}" ;;
        *.fc9*)   kname="${verrel}.%{_target_cpu}${variant:+.${variant}}" ;;
        *)        kname="${verrel}${variant}"                             ;;
    esac

    cat <<EOF

%global _find_debuginfo_opts %{?_find_debuginfo_opts} -p '.*openafs\.ko.*' -o kmod-debuginfo.list

%package       -n kmod-${kmod_name}${dashvariant}
Summary:          ${kmod_name} kernel module(s)
Group:            System Environment/Kernel
Provides:         kernel-modules = ${kname}
Provides:         ${kmod_name}-kmod = %{?epoch:%{epoch}:}%{version}-%{release}
Provides:         openafs-kernel = %{version}
Requires:         ${kdep}
Requires:         ${kmod_name}-kmod-common >= %{?epoch:%{epoch}:}%{version}
Requires(post):   ${depmod}
Requires(postun): ${depmod}
Release:          %{pkgrel}.%(echo ${verrel} | tr - _)
BuildRequires:    kernel${dashvariant}-devel-%{_target_cpu} = ${verrel}
%if 0%{?rhel} >= 8
BuildRequires: elfutils-devel
%endif
%description   -n kmod-${kmod_name}${dashvariant}
This package provides the ${kmod_name} kernel modules built for the Linux
kernel ${kname} for the %{_target_cpu} family of processors.

%package       -n kmod-%{kmod_name}${dashvariant}-debuginfo
Summary:          Debug information for %{kmod_name} kernel modules
Group:            Development/Debug
Release:          %{pkgrel}.%(echo ${verrel} | tr - _)
AutoReqProv:      no
%description   -n kmod-%{kmod_name}${dashvariant}-debuginfo
This package provides debug information for the %{kmod_name} kernel modules
built for the Linux kernel ${kname} for the %{_target_cpu} family of processors.

%post          -n kmod-${kmod_name}${dashvariant}
${depmod} -aeF /boot/System.map-${kname} ${kname} > /dev/null || :
%postun        -n kmod-${kmod_name}${dashvariant}
${depmod} -aF /boot/System.map-${kname} ${kname} &> /dev/null || :
%files         -n kmod-${kmod_name}${dashvariant}
%defattr(644,root,root,755)
/lib/modules/${kname}/extra/${kmod_name}/

%files -f kmod-debuginfo.list -n kmod-%{kmod_name}${dashvariant}-debuginfo
%defattr(-,root,root)

EOF
}

print_rpmtemplate ()
{
  kmod_name="${1}"
  shift
  kver="${1}"
  get_verrel "${1}"
  shift
  depmod="${1}"
  shift
  if [ -z "${kmod_name}" ] ; then
    echo "Please provide the kmodule-name as first parameter." >&2
    exit 2
  elif [ -z "${kver}" ] ; then
    echo "Please provide the kver as second parameter." >&2
    exit 2
  elif [ -z "${depmod}" ] ; then
    echo "Please provide the full path to depmod as third parameter." >&2
    exit 2
  elif [ -z "${verrel}" ] ; then
    echo "Couldn't find out the verrel." >&2
    exit 2
  fi

  for variant in "$@" ; do
    get_rpmtemplate "${variant}"
  done
}

usage ()
{
  cat <<EOF
You called: ${invocation}

Usage: ${myprog} <command> <option>+
 Commands:
  verrel <uname>
    - Get "base" version-release.
  variant <uname>
    - Get variant from uname.
  rpmtemplate <mainpgkname> <uname> </path/to/depmod> <variants>
    - Return a template for
  version
    - Output version number and exit.
EOF
}

invocation="$(basename ${0}) $@"
while [ "${1}" ] ; do
  case "${1}" in
    verrel)
      shift
      print_verrel $@
      exit $?
      ;;
    variant)
      shift
      print_variant $@
      exit $?
      ;;
    rpmtemplate)
      shift
      print_rpmtemplate "$@"
      exit $?
      ;;
    version)
      echo "${myprog} ${myver}"
      exit 0
      ;;
    *)
      echo "Error: Unknown option '${1}'." >&2
      usage >&2
      exit 2
      ;;
  esac
done

# Local variables:
# mode: sh
# sh-indentation: 2
# indent-tabs-mode: nil
# End:
# ex: ts=2 sw=2 et
